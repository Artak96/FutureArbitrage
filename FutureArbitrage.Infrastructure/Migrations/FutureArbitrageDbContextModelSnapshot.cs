// <auto-generated />
using System;
using FutureArbitrage.Infrastructure.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FutureArbitrage.Infrastructure.Migrations
{
    [DbContext(typeof(FutureArbitrageDbContext))]
    partial class FutureArbitrageDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FutureArbitrage.Domain.Entities.ArbitrageResult", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("FuturesContract1Id")
                        .HasColumnType("bigint");

                    b.Property<long>("FuturesContract2Id")
                        .HasColumnType("bigint");

                    b.Property<decimal>("PriceDifference")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("PriceF1")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("PriceF2")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FuturesContract1Id");

                    b.HasIndex("FuturesContract2Id");

                    b.ToTable("ArbitrageResult");
                });

            modelBuilder.Entity("FutureArbitrage.Domain.Entities.FutureContract", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Asset")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("FutureContract");
                });

            modelBuilder.Entity("FutureArbitrage.Domain.Entities.FuturePrice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<long>("FutureContractId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("FutureContractId");

                    b.ToTable("FuturePrice");
                });

            modelBuilder.Entity("FutureArbitrage.Domain.Entities.ArbitrageResult", b =>
                {
                    b.HasOne("FutureArbitrage.Domain.Entities.FutureContract", "FuturesContract1")
                        .WithMany("ArbitrageResultsAsContract1")
                        .HasForeignKey("FuturesContract1Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FutureArbitrage.Domain.Entities.FutureContract", "FuturesContract2")
                        .WithMany()
                        .HasForeignKey("FuturesContract2Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FuturesContract1");

                    b.Navigation("FuturesContract2");
                });

            modelBuilder.Entity("FutureArbitrage.Domain.Entities.FuturePrice", b =>
                {
                    b.HasOne("FutureArbitrage.Domain.Entities.FutureContract", "FuturesContract")
                        .WithMany("FuturesPrices")
                        .HasForeignKey("FutureContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FuturesContract");
                });

            modelBuilder.Entity("FutureArbitrage.Domain.Entities.FutureContract", b =>
                {
                    b.Navigation("ArbitrageResultsAsContract1");

                    b.Navigation("FuturesPrices");
                });
#pragma warning restore 612, 618
        }
    }
}
